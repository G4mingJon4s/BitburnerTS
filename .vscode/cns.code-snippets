{
	// Place your BitburnerTS workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"CNS-Shortcut": {
		"prefix": [
			"cns",
			"cctns",
			"cct"
		],
		"body": [
			"import type { NS } from \"@ns\";",
			"",
			"export const type = \"${TM_FILENAME_BASE/\\$/:/g}\";",
			"export const TESTAMT = 100;",
			"export const TESTRATE = 5;",
			"",
			"export function solve(data: ${1|number,string,number[],string[],number[][],[string\\, number],[number\\, number[]]|}): ${2|string,number,any[]|} {",
			"\treturn data;$0",
			"}",
			"",
			"export async function test(ns: NS, tests: string[]): Promise<void> {",
			"\ttry {",
			"\t\tns.disableLog(\"ALL\"); ns.tail(); ns.resizeTail(1500, 500); ns.moveTail(10, 10);",
			"",
			"\t\tfor (const test of tests) {",
			"\t\t\tif (!ns.fileExists(test, \"home\")) {",
			"\t\t\t\tns.print(`File with name \\${test} does not exist on \"home\".`);",
			"\t\t\t\tcontinue;",
			"\t\t\t}",
			"\t\t\t",
			"\t\t\tconst data = ns.codingcontract.getData(test, \"home\") as $1;",
			"\t\t\tconst answer = solve(data);",
			"",
			"\t\t\tconst result = ns.codingcontract.attempt(answer, test, \"home\");",
			"",
			"\t\t\tif (result.length > 0) ns.print(`SUCCESS: \"\\${test}\" finished correctly.`);",
			"\t\t\telse ns.print(`ERROR: \"\\${test}\" resulted in an error.\\n Input : \\${String(data)}\\n Answer: \\${String(answer)}`);",
			"",
			"\t\t\tawait ns.asleep(1000 / TESTRATE);",
			"\t\t\tns.resizeTail(1500, 500);",
			"\t\t}",
			"\t} catch (e) {",
			"\t\treturn ns.alert(`Solving contract with type \"\\${type}\" resulted in an error:\\n\\${String(e)}`);",
			"\t} finally {",
			"\t\tns.print(`Solving contract with type \"\\${type}\" ended. You may close the window.`);",
			"\t}",
			"}",
			"",
			"export async function main(ns: NS): Promise<void> {",
			"\tfor (let i = 0; i < TESTAMT; i++) ns.codingcontract.createDummyContract(type);",
			"",
			"\tconst dummyContracts = ns.ls(\"home\", \".cct\").filter(name => ns.codingcontract.getContractType(name, \"home\") !== type);",
			"",
			"\tawait test(ns, dummyContracts);",
			"}",
		]
	}
}