import { NS } from "@ns";

export async function main(ns: NS) {
	ns.disableLog("ALL");
	const reserved = true || ns.codingcontract.attempt;

	// Some way of sending a fn to do and to get the result

	// Sample data: 	{ pid: 123, fn: "ns.tprint", args: ["123", " I don't take up any ram!"] }
	// Sample output: { pid: 123, error: false, result: void }

	const input = ns.getPortHandle(8);
	const output = ns.getPortHandle(9);

	while (true) {
		await ns.sleep(20);

		if (!output.empty()) {
			const allResponses = new Array<{ pid: number, fn: string, args: unknown[] }>();
			while (!output.empty()) allResponses.push(JSON.parse(output.read() as string) as { pid: number, fn: string, args: unknown[] });
			const remainingResponses = allResponses.filter(res => ns.isRunning(res.pid));
			while (remainingResponses.length > 0) output.write(JSON.stringify(remainingResponses.shift()));
		}

		if (input.empty()) continue;

		const req = JSON.parse(input.read() as string) as { pid: number, fn: string, args: string[] };

		try {
			const result = eval(`(async() => ${req.fn}(${req.args.map(s => String(s)).join(", ")}))()`) as Promise<unknown>;
			console.log(result);
			const value = await result;
			output.write(JSON.stringify({
				pid: req.pid,
				error: false,
				result: value
			}));
		} catch {
			output.write(JSON.stringify({
				pid: req.pid,
				error: true,
				result: null
			}));
		}
	}
}

export async function run(ns: NS, fn: string, args: unknown[]) {
	const input = ns.getPortHandle(8);
	const output = ns.getPortHandle(9);

	const pid = ns.getRunningScript()?.pid;
	if (pid === undefined) throw new Error("Pid is undefined. How?");

	input.write(JSON.stringify({
		pid,
		fn,
		args
	}));

	while (output.empty() || (JSON.parse(output.peek() as string) as { pid: number, error: boolean, result: unknown}).pid !== pid) await ns.sleep(15);

	const res = JSON.parse(output.read() as string) as { pid: number, error: boolean, result: unknown};

	if (res.error) throw new Error(`Function ${fn} returned with an error!: ${fn}(${args.join(", ")})`);

	return res.result;
}