import { NS } from "@ns";
import { money, time } from "money";
import { addBorder, progressBar } from "table";

let before = 0;
let beforeTime = 0;

export async function main(ns: NS) {
	ns.clearLog(); ns.disableLog("ALL"); ns.tail(); await ns.sleep(1); ns.resizeTail(294, 238);

	goToCasino(ns);
	startCoinFlip();
	while (ns.getMoneySources().sinceInstall.casino < 10_000_000_000) {

		ns.clearLog();
		ns.print("GETTING SEQUENCE");

		try {
			setMoneyInput(-1);

			const { tails, heads } = getHeadTailButtonRefs();

			const sequence = await getSequence(ns, tails);

			console.log("SEQ", sequence);

			await validateSequence(ns, sequence, tails);
			await validateSequence(ns, sequence, tails);

			console.log("SEQ VALID");

			setMoneyInput(10000);

			before = ns.getMoneySources().sinceInstall.casino;
			beforeTime = performance.now();

			await executeSequence(ns, sequence, tails, heads);
		} catch (e) {
			console.error("COIN FLIP ERROR! REBASE!");
			console.error(e);
		}

		await ns.sleep(500);
	}
}

export function goToCasino(ns: NS) {
	if (ns.getPlayer().city !== "Aevum" && !ns.singularity.travelToCity("Aevum")) throw new Error("Could not get to Aevum!");
	if (!ns.singularity.goToLocation("Iker Molina Casino")) throw new Error("Could not get to the casino!");
}

export function startCoinFlip() {
	const doc = eval("document") as Document;
	const allButtons = doc.querySelectorAll("button");
	const coinFlip = Array.from(allButtons).find(b => b.textContent?.toLowerCase() === "play coin flip");
	if (coinFlip === undefined) throw new Error("Could not find coin flip game!");
	clickButton(coinFlip);
}

export function getHeadTailButtonRefs() {
	const doc = eval("document") as Document;
	const allButtons = doc.querySelectorAll("button");
	const tails = Array.from(allButtons).find(b => b.textContent?.toLowerCase() === "tail!");
	const heads = Array.from(allButtons).find(b => b.textContent?.toLowerCase() === "head!");
	if (tails === undefined || heads === undefined) throw new Error("Could not find heads and tails!");
	return {
		tails,
		heads
	};
}

export async function getSequence(ns: NS, tails: HTMLButtonElement) {
	const sequence = new Array<string>();
	for (let i = 0; i < 1024; i++) {
		clickButton(tails);
		const result = findResult();
		if (result.textContent === null) throw new Error("Got result with no text content!");
		sequence.push(result.textContent);
		await ns.asleep(1);
	}
	return sequence;
}

export async function validateSequence(ns: NS, sequence: Array<string>, tails: HTMLButtonElement) {
	for (let i = 0; i < 1024; i++) {
		clickButton(tails);
		const result = findResult();
		if (result.textContent === null) throw new Error("Got result with no text content!");
		if (sequence[i] !== result.textContent) throw new Error(`Sequence at Pos #${i} does not match with result! ${sequence[i]} : ${result.textContent}`);
	}
}

export async function executeSequence(ns: NS, sequence: Array<string>, tails: HTMLButtonElement, heads: HTMLButtonElement) {
	let rounds = 0;

	while (ns.getMoneySources().sinceInstall.casino < 10_000_000_000) {
		const value = sequence[rounds++ % 1024];
		if (value === "T") clickButton(tails);
		else 							 clickButton(heads);

		// if (rounds % 256 === 0 && !hasWon()) throw new Error(`Something went wrong! Lost with sequence pos #${(rounds - 1) % 1024}! Expected ${value}, Bet on ${value === "T" ? "Tails" : "Heads"}!`);
		
		if (rounds % 512 === 0) {
			display(ns);
			await ns.asleep(0);
		}
	}
}

export function display(ns: NS) {
	const income = getIncome(ns);
	const moneyTotal = ns.getMoneySources().sinceInstall.casino;
	const left = 10_000_000_000 - moneyTotal;
	const ticksRemaining = left / income;
	const p = moneyTotal / 10_000_000_000;
	const bar = progressBar(p, 20);

	const barString = bar + " " + Math.floor(p * 100).toString() + "%";
	const timeString = time(ticksRemaining);
	const incomeString = "$" + money(income * 1000, 2) + "/s";
	const gottenString = "$" + money(moneyTotal, 2);

	const rows = [
		"Current Progress",
		barString,
		"",
		"Estimated Time",
		timeString,
		"",
		"Current Income",
		incomeString,
		"",
		"Money earned",
		gottenString
	];

	ns.clearLog();
	ns.printf("%s", addBorder(rows));
}

export function getIncome(ns: NS) {
	// Change = delta money / delta time
	// Change = (money2 - money1) / (time2 - time1)

	const m2 = ns.getMoneySources().sinceInstall.casino;
	const t = performance.now();

	const t1 = new Date(beforeTime);
	const t2 = new Date(t);
	const time = t2.getTime() - t1.getTime();

	const perTick = (m2 - before) / time;
	before = m2;
	beforeTime = t;
	return perTick;
}

export function setMoneyInput(money: number) {
	const doc = eval("document") as Document;
	const allInputs = doc.querySelectorAll("input");
	const numberInput = Array.from(allInputs).find(i => i.type === "number");
	if (numberInput === undefined) throw new Error("Could not find number input!");
	numberInput.value = String(money === -1 ? "" : money);
}

export function findResult() {
	const doc = eval("document") as Document;
	const allP = doc.querySelectorAll("p");
	const result = Array.from(allP).find(p => p.textContent === "H" || p.textContent === "T");
	if (result === undefined) throw new Error("Could not find result!");
	return result;
}

export function hasWon() {
	const doc = eval("document") as Document;
	const allH3 = doc.querySelectorAll("h3");
	const result = Array.from(allH3).find(h => h.textContent === " win!" || h.textContent === "lose!");
	if (result === undefined) throw new Error("Could not find the result h3!");
	return result.textContent === " win!";
}

export function clickButton(ref: HTMLElement) {
	const obj = ref[Object.keys(ref)[1] as keyof HTMLElement] as unknown as simpleObject; // no idea what type that is (maybe ReactProps somethingsomething), casting to simpleObject to please TS
	obj.onClick({ isTrusted: true } as MouseEvent);
}

interface simpleObject {
	onClick: (a: MouseEvent) => void;
}